#+TITLE: Harrison's GNU Emacs Configuration
#+AUTHOR: Harrison Totty
#+EMAIL: harrisongtotty@gmail.com
#+OPTIONS: toc:nil num:nil

* Introduction
This file conveniently contains the bulk of my GNU Emacs configuration.
* EVIL
Because Emacs is a great operating system with a crappy text editor.
#+begin_src emacs-lisp
(straight-use-package 'evil)
(require 'evil)
(evil-mode 1)
#+end_src
* Packages
** DevOps Languages
*** Puppet
#+BEGIN_SRC emacs-lisp
(straight-use-package 'puppet-mode)
#+END_SRC
*** Salt
#+BEGIN_SRC emacs-lisp
(straight-use-package 'salt-mode)
#+END_SRC
*** Terraform
#+BEGIN_SRC emacs-lisp
(straight-use-package 'terraform-mode)
#+END_SRC
** Editing & Workflow
*** Automatic Key Binding Discovery
#+BEGIN_SRC emacs-lisp
(straight-use-package 'guide-key)
#+END_SRC
*** Autocompletion Framework
#+BEGIN_SRC emacs-lisp
(straight-use-package 'company)
(straight-use-package 'company-math)
#+END_SRC
*** Syntax Checking
#+BEGIN_SRC emacs-lisp
(straight-use-package 'flycheck)
(add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC
** Libraries
#+BEGIN_SRC emacs-lisp
(straight-use-package 'f)
(straight-use-package 's)
#+END_SRC
** Markup Languages
*** Markdown
#+BEGIN_SRC emacs-lisp
(straight-use-package 'markdown-mode)
#+END_SRC
*** Org
Note that org-mode's installation is handled by =init.el=
#+BEGIN_SRC emacs-lisp
(straight-use-package 'org-bullets)
#+END_SRC
*** YAML
#+BEGIN_SRC emacs-lisp
(straight-use-package 'yaml-mode)
#+END_SRC
** Programming Languages
*** Crystal
#+BEGIN_SRC emacs-lisp
(straight-use-package 'crystal-mode)
(straight-use-package 'flycheck-crystal)
(straight-use-package 'inf-crystal)
(straight-use-package 'ob-crystal)
#+END_SRC
*** Haskell
#+begin_src emacs-lisp
(straight-use-package 'haskell-mode)
#+end_src
*** Python
#+begin_src emacs-lisp
(straight-use-package 'ein)
;(straight-use-package 'ob-ein)
#+end_src
*** Rust
#+begin_src emacs-lisp
(straight-use-package 'rust-mode)
;(straight-use-package 'flycheck-rust)
;(with-eval-after-load 'rust-mode
;  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src
*** Shell Scripting
#+begin_src emacs-lisp
;(straight-use-package 'ob-sh)
#+end_src
** User Interface & Appearance
*** Color Theme
#+BEGIN_SRC emacs-lisp
(straight-use-package 'base16-theme)
#+END_SRC
* User Interface & Appearance
** Splash Screen & Scratch Buffer
*** Hide the splash/startup screen by default
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC
*** Show my todo list as the initial buffer
I've disabled this for now, since I would rather just have a scratch buffer.
#+BEGIN_SRC emacs-lisp
;; (setq initial-buffer-choice "~/wolfram-research/docs/todo.org")
#+END_SRC
*** Modify the scratch buffer
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message 
  (with-temp-buffer 
    (insert-file-contents "~/.emacs.d/banner.txt") 
    (buffer-string)
  )
)
#+END_SRC
** Theme
*** Load colors generated by pywal
#+BEGIN_SRC emacs-lisp
  (when (file-readable-p "~/.emacs.d/themes/wal.el") 
    (load-file "~/.emacs.d/themes/wal.el")
  )
#+END_SRC
*** Tweak some colors
#+BEGIN_SRC emacs-lisp
(set-face-foreground 'mode-line wal-color15)
#+END_SRC
*** Load my default font
#+begin_src 
(set-face-attribute 'default t :font "Iosevka 16")
#+end_src
** Menu, Toolbar, and Scrollbar
I don't like having these, so let's disable them.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(when window-system (scroll-bar-mode -1))
#+END_SRC
** Window Title
This should be something decently useful.
#+BEGIN_SRC emacs-lisp
(setq frame-title-format "GNU Emacs : %b")
#+END_SRC
** Fringe
#+BEGIN_SRC emacs-lisp
(set-fringe-mode 0)
#+END_SRC
** Mode Line
*** Background
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'mode-line nil :box nil)
(set-face-attribute 'mode-line-inactive nil :box nil)
#+END_SRC
*** Text Format
#+BEGIN_SRC emacs-lisp
  (require 'f)
  (require 's)
  (defun simple-mode-line-render (left right)
  "Return a string of `window-width' length containing LEFT, and RIGHT aligned respectively."
  (let* ((available-width (- (window-width) (length left) 2)))
          (format (format "%%s %%%ds" available-width) left right)))

      (setq-default mode-line-format
        '((:eval (simple-mode-line-render
          ;; Left Side
          (format-mode-line
            (list
              " ["
              ;; Current EVIL state
              (downcase (symbol-name evil-state))
              " "
              ;; Current major mode
              (s-replace "lisp interaction" "scratch" (downcase (if (s-contains? "[" mode-name) (car (s-split "\\[" mode-name)) mode-name)))
              "]  "
              ;; Current buffer name
              (if buffer-file-name
                (if (> (length (f-short buffer-file-name)) 60)
                  (if (s-starts-with? "~" (f-short buffer-file-name))
                    (s-concat "~/.../" (f-filename (f-parent buffer-file-name)) "/" (f-filename buffer-file-name))
                    (s-concat "/.../" (f-filename (f-parent buffer-file-name)) "/" (f-filename buffer-file-name))
                  )
                  (f-short buffer-file-name)
                )
                (s-concat "(" (buffer-name) ")")
              )
            )
          )
          ;; Right Side
          (format-mode-line
            "(%l,%c) "
          )
        )))
      )
#+END_SRC
** Org Mode
*** Enable =org-bullets=.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook #'org-bullets-mode)
#+END_SRC
*** Change the =org-ellipsis= to something cooler.
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "â¤µ")
#+END_SRC
*** Enable syntax highlighting.
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
*** Make inline LaTeX larger.
#+BEGIN_SRC emacs-lisp
(require 'org)
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.6))
#+END_SRC
** Font Configuration
*** Setup ligatures for Iosevka
#+begin_src text
  (setq prettify-symbols-unprettify-at-point 'right-edge)

  (defun setup-iosevka-ligatures ()
    (setq prettify-symbols-alist
          (append prettify-symbols-alist '(

;; Double-ended hyphen arrows ----------------
("<->" . #Xe100)
("<-->" . #Xe101)
("<--->" . #Xe102)
("<---->" . #Xe103)
("<----->" . #Xe104)

;; Double-ended equals arrows ----------------
("<=>" . #Xe105)
("<==>" . #Xe106)
("<===>" . #Xe107)
("<====>" . #Xe108)
("<=====>" . #Xe109)

;; Double-ended asterisk operators ----------------
("<**>" . #Xe10a)
("<***>" . #Xe10b)
("<****>" . #Xe10c)
("<*****>" . #Xe10d)

;; HTML comments ----------------
("<!--" . #Xe10e)
("<!---" . #Xe10f)

;; Three-char ops with discards ----------------
("<$" . #Xe110)
("<$>" . #Xe111)
("$>" . #Xe112)
("<." . #Xe113)
("<.>" . #Xe114)
(".>" . #Xe115)
("<*" . #Xe116)
("<*>" . #Xe117)
("*>" . #Xe118)
("<\\" . #Xe119)
("<\\>" . #Xe11a)
("\\>" . #Xe11b)
("</" . #Xe11c)
("</>" . #Xe11d)
("/>" . #Xe11e)
("<\"" . #Xe11f)
("<\">" . #Xe120)
("\">" . #Xe121)
("<'" . #Xe122)
("<'>" . #Xe123)
("'>" . #Xe124)
("<^" . #Xe125)
("<^>" . #Xe126)
("^>" . #Xe127)
("<&" . #Xe128)
("<&>" . #Xe129)
("&>" . #Xe12a)
("<%" . #Xe12b)
("<%>" . #Xe12c)
("%>" . #Xe12d)
("<@" . #Xe12e)
("<@>" . #Xe12f)
("@>" . #Xe130)
("<#" . #Xe131)
("<#>" . #Xe132)
("#>" . #Xe133)
("<+" . #Xe134)
("<+>" . #Xe135)
("+>" . #Xe136)
("<-" . #Xe137)
("<->" . #Xe138)
("->" . #Xe139)
("<!" . #Xe13a)
("<!>" . #Xe13b)
("!>" . #Xe13c)
("<?" . #Xe13d)
("<?>" . #Xe13e)
("?>" . #Xe13f)
("<|" . #Xe140)
("<|>" . #Xe141)
("|>" . #Xe142)
("<:" . #Xe143)
("<:>" . #Xe144)
(":>" . #Xe145)

;; Colons ----------------
("::" . #Xe146)
(":::" . #Xe147)
("::::" . #Xe148)

;; Arrow-like operators ----------------
("->" . #Xe149)
("->-" . #Xe14a)
("->--" . #Xe14b)
("->>" . #Xe14c)
("->>-" . #Xe14d)
("->>--" . #Xe14e)
("->>>" . #Xe14f)
("->>>-" . #Xe150)
("->>>--" . #Xe151)
("-->" . #Xe152)
("-->-" . #Xe153)
("-->--" . #Xe154)
("-->>" . #Xe155)
("-->>-" . #Xe156)
("-->>--" . #Xe157)
("-->>>" . #Xe158)
("-->>>-" . #Xe159)
("-->>>--" . #Xe15a)
(">-" . #Xe15b)
(">--" . #Xe15c)
(">>-" . #Xe15d)
(">>--" . #Xe15e)
(">>>-" . #Xe15f)
(">>>--" . #Xe160)
("=>" . #Xe161)
("=>=" . #Xe162)
("=>==" . #Xe163)
("=>>" . #Xe164)
("=>>=" . #Xe165)
("=>>==" . #Xe166)
("=>>>" . #Xe167)
("=>>>=" . #Xe168)
("=>>>==" . #Xe169)
("==>" . #Xe16a)
("==>=" . #Xe16b)
("==>==" . #Xe16c)
("==>>" . #Xe16d)
("==>>=" . #Xe16e)
("==>>==" . #Xe16f)
("==>>>" . #Xe170)
("==>>>=" . #Xe171)
("==>>>==" . #Xe172)
(">=" . #Xe173)
(">==" . #Xe174)
(">>=" . #Xe175)
(">>==" . #Xe176)
(">>>=" . #Xe177)
(">>>==" . #Xe178)
("<-" . #Xe179)
("-<-" . #Xe17a)
("--<-" . #Xe17b)
("<<-" . #Xe17c)
("-<<-" . #Xe17d)
("--<<-" . #Xe17e)
("<<<-" . #Xe17f)
("-<<<-" . #Xe180)
("--<<<-" . #Xe181)
("<--" . #Xe182)
("-<--" . #Xe183)
("--<--" . #Xe184)
("<<--" . #Xe185)
("-<<--" . #Xe186)
("--<<--" . #Xe187)
("<<<--" . #Xe188)
("-<<<--" . #Xe189)
("--<<<--" . #Xe18a)
("-<" . #Xe18b)
("--<" . #Xe18c)
("-<<" . #Xe18d)
("--<<" . #Xe18e)
("-<<<" . #Xe18f)
("--<<<" . #Xe190)
("<=" . #Xe191)
("=<=" . #Xe192)
("==<=" . #Xe193)
("<<=" . #Xe194)
("=<<=" . #Xe195)
("==<<=" . #Xe196)
("<<<=" . #Xe197)
("=<<<=" . #Xe198)
("==<<<=" . #Xe199)
("<==" . #Xe19a)
("=<==" . #Xe19b)
("==<==" . #Xe19c)
("<<==" . #Xe19d)
("=<<==" . #Xe19e)
("==<<==" . #Xe19f)
("<<<==" . #Xe1a0)
("=<<<==" . #Xe1a1)
("==<<<==" . #Xe1a2)
("=<" . #Xe1a3)
("==<" . #Xe1a4)
("=<<" . #Xe1a5)
("==<<" . #Xe1a6)
("=<<<" . #Xe1a7)
("==<<<" . #Xe1a8)

;; Monadic operators ----------------
(">=>" . #Xe1a9)
(">->" . #Xe1aa)
(">-->" . #Xe1ab)
(">==>" . #Xe1ac)
("<=<" . #Xe1ad)
("<-<" . #Xe1ae)
("<--<" . #Xe1af)
("<==<" . #Xe1b0)

;; Composition operators ----------------
(">>" . #Xe1b1)
(">>>" . #Xe1b2)
("<<" . #Xe1b3)
("<<<" . #Xe1b4)

;; Lens operators ----------------
(":+" . #Xe1b5)
(":-" . #Xe1b6)
(":=" . #Xe1b7)
("+:" . #Xe1b8)
("-:" . #Xe1b9)
("=:" . #Xe1ba)
("=^" . #Xe1bb)
("=+" . #Xe1bc)
("=-" . #Xe1bd)
("=*" . #Xe1be)
("=/" . #Xe1bf)
("=%" . #Xe1c0)
("^=" . #Xe1c1)
("+=" . #Xe1c2)
("-=" . #Xe1c3)
("*=" . #Xe1c4)
("/=" . #Xe1c5)
("%=" . #Xe1c6)

;; Logical ----------------
("/\\" . #Xe1c7)
("\\/" . #Xe1c8)

;; Semigroup/monoid operators ----------------
("<>" . #Xe1c9)
("<+" . #Xe1ca)
("<+>" . #Xe1cb)
("+>" . #Xe1cc)
             ))))

  (defun refresh-pretty ()
    (prettify-symbols-mode -1)
    (prettify-symbols-mode +1))

  ;; Hooks for modes in which to install the Iosevka ligatures
  (mapc (lambda (hook)
          (add-hook hook (lambda () (setup-iosevka-ligatures) (refresh-pretty))))
        '(text-mode-hook
          prog-mode-hook))
  (global-prettify-symbols-mode +1)
#+end_src
* Editing & Workflow
** Company Mode
Enable ==company-mode== completion in all buffers
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
** "Interactively Do Things" Mode
*** Enable =ido-mode= on startup.
#+begin_src emacs-lisp
(require 'ido)
(ido-mode t)
#+end_src
*** Allow TAB to auto-complete in =ido-mode=.
#+begin_src emacs-lisp
(setq ido-enable-prefix t)
(setq ido-cannot-complete-command 'ido-next-match)
#+end_src
*** Enable fuzzy ("flex") matching.
#+begin_src emacs-lisp
(setq ido-enable-flex-matching t)
#+end_src
*** Enable =ido-mode= pretty-much everywhere.
#+begin_src emacs-lisp
(setq ido-everywhere t)
(setq ido-virtual-buffers t)
#+end_src
*** Allow =ido-mode= to create buffers that don't exist when running =C-x b=.
#+begin_src emacs-lisp
(setq ido-create-buffer 'always)
#+end_src
*** Make =ido-mode= honor =completion-ignored-extensions=.
#+begin_src emacs-lisp
(setq ido-ignore-extensions t)
#+end_src
*** Prevent =ido-mode= from storing history.
#+begin_src emacs-lisp
(setq ido-enable-last-directory-history nil)
(setq ido-record-commands nil)
(setq ido-max-work-directory-list 0)
(setq ido-max-work-file-list 0)
#+end_src
** Org Mode
*** Make TAB act as if it were issued in a buffer of the language's major mode.
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC
*** Use the current window when editing a code snippet.
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC
*** Enable spell checking.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC
*** Automatically indent text and wrap lines.
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC
*** Remove emphasis markers so that /italics/ or *bold* words just look that way.
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC
*** Enable in-line images (use =org-redisplay-inline-images= to refresh the in-lined images).
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC
*** Enable visual line mode by default.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook #'visual-line-mode)
#+END_SRC
*** Enable easy templates.
#+BEGIN_SRC emacs-lisp
(require 'org-tempo)
#+END_SRC
*** Don't warn me when I try to evaluate a code block.
#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src
*** Set up my languages.
#+BEGIN_SRC emacs-lisp
(eval-after-load 'org
  (org-babel-do-load-languages 'org-babel-load-languages
    '(
      (awk . t)
      (calc . t)
      (C . t)
      (crystal . t)
      (ein . t)
      (emacs-lisp . t)
      (gnuplot . t)
      (haskell . t)
      (latex . t)
      (perl . t)
      (python . t)
      (R . t)
      ;(sh . t)
    )
  )
)
#+END_SRC
** Markdown
*** Enable visual line mode by default.
#+BEGIN_SRC emacs-lisp
(add-hook 'gfm-mode-hook #'visual-line-mode)
#+END_SRC
** Misc
*** Always assume that I want to kill the buffer when pressing =C-x k=.
#+BEGIN_SRC emacs-lisp
  (defun hgt/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'hgt/kill-current-buffer)
#+END_SRC
*** Always indent with spaces. Tabs are a sin.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
*** Change the behavior of automatically created backup and autosave files.
That sh*t is annoying. Stop it from happening.
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq create-lockfiles nil)
#+END_SRC
*** Enable =delete-selection-mode= because it makes sense.
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC
*** Disable =cua-mode= because I use /EVIL/ now.
#+BEGIN_SRC emacs-lisp
  (cua-mode nil)                        ; Enable cua-mode
  (setq cua-auto-tabify-rectangles nil) ; Don't tabify after rectangle commands
  (transient-mark-mode 1)               ; No region when not highlighted
  (setq cua-keep-region-after-copy t)   ; Keep showing the region after copying it
#+END_SRC
*** Set the default working directory to =~/projects=.
#+BEGIN_SRC emacs-lisp
  (setq default-directory "~/projects")
#+END_SRC
*** Enable =guide-key= by default.
#+BEGIN_SRC emacs-lisp
  (require 'guide-key)
  (guide-key-mode t)
  (setq guide-key/guide-key-sequence t)
  (setq guide-key/popup-window-position 'bottom)
#+END_SRC
*** Enable smooth scrolling.
#+begin_src emacs-lisp
(setq redisplay-dont-pause t
  scroll-margin 1
  scroll-step 1
  scroll-conservatively 10000
  scroll-preserve-screen-position 1)
(setq-default scroll-up-aggressively 0.01
  scroll-down-aggressively 0.01)
#+end_src
