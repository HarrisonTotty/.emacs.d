#+TITLE: Harrison's GNU Emacs Configuration
#+AUTHOR: Harrison Totty
#+EMAIL: harrisongtotty@gmail.com
#+OPTIONS: toc:nil num:nil

* Introduction
This file conveniently contains the bulk of my GNU Emacs configuration.

* Packages
** =base16-theme=
#+BEGIN_SRC emacs-lisp
(straight-use-package 'base16-theme)
#+END_SRC

** =company-mode=
Company mode is pretty handy!
#+BEGIN_SRC emacs-lisp
(straight-use-package 'company)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(straight-use-package 'company-math)
#+END_SRC

** =crystal-mode=
#+BEGIN_SRC emacs-lisp
(straight-use-package 'crystal-mode)
#+END_SRC
** =guide-key=
#+BEGIN_SRC emacs-lisp
(straight-use-package 'guide-key)
#+END_SRC
** =markdown-mode=
#+BEGIN_SRC emacs-lisp
(straight-use-package 'markdown-mode)
#+END_SRC

** =org-mode=
org-mode's installation is handled by =init.el=
** =org-bullets=
This allows me to see a much nicer outline in org-mode.
#+BEGIN_SRC emacs-lisp
(straight-use-package 'org-bullets)
#+END_SRC

** =puppet-mode=
#+BEGIN_SRC emacs-lisp
(straight-use-package 'puppet-mode)
#+END_SRC
** =s=
"s" is a collection of string manipulation libraries.
#+BEGIN_SRC emacs-lisp
(straight-use-package 's)
#+END_SRC
** =f=
"f" is a collection of file manipulation libraries.
#+BEGIN_SRC emacs-lisp
(straight-use-package 'f)
#+END_SRC
** =salt-mode=
#+BEGIN_SRC emacs-lisp
(straight-use-package 'salt-mode)
#+END_SRC
** =yaml-mode=
#+BEGIN_SRC emacs-lisp
(straight-use-package 'yaml-mode)
#+END_SRC
* User Interface & Appearance
** Splash Screen & Scratch Buffer
*** Hide the splash/startup screen by default
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

*** Show my todo list as the initial buffer
I've disabled this for now, since I would rather just have a scratch buffer.
#+BEGIN_SRC emacs-lisp
;; (setq initial-buffer-choice "~/wolfram-research/docs/todo.org")
#+END_SRC

*** Modify the scratch buffer
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message 
  (with-temp-buffer 
    (insert-file-contents "~/.emacs.d/banner.txt") 
    (buffer-string)
  )
)
#+END_SRC

** Theme
*** Load colors generated by pywal
#+BEGIN_SRC emacs-lisp
  (when (file-readable-p "~/.emacs.d/themes/wal.el") 
    (load-file "~/.emacs.d/themes/wal.el")
  )
#+END_SRC

*** Tweak some colors
#+BEGIN_SRC emacs-lisp
(set-face-foreground 'mode-line wal-color15)
#+END_SRC

** Menu, Toolbar, and Scrollbar
I don't like having these, so let's disable them.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(when window-system (scroll-bar-mode -1))
#+END_SRC

** Window Title
This should be something decently useful.
#+BEGIN_SRC emacs-lisp
(setq frame-title-format "GNU Emacs : %b")
#+END_SRC

** Fringe
#+BEGIN_SRC emacs-lisp
(set-fringe-mode 0)
#+END_SRC

** Mode Line
*** Background
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'mode-line nil :box nil)
(set-face-attribute 'mode-line-inactive nil :box nil)
#+END_SRC

*** Text Format
#+BEGIN_SRC emacs-lisp
  (require 'f)
  (require 's)
  (defun simple-mode-line-render (left right)
  "Return a string of `window-width' length containing LEFT, and RIGHT aligned respectively."
  (let* ((available-width (- (window-width) (length left) 2)))
          (format (format "%%s %%%ds" available-width) left right)))

      (setq-default mode-line-format
        '((:eval (simple-mode-line-render
          ;; Left Side
          (format-mode-line
            (list
              ;; Current major mode
              "["
              (downcase mode-name)
              "]  "
              ;; Current buffer name
              (if buffer-file-name
                (if (> (length (f-short buffer-file-name)) 60)
                  (if (s-starts-with? "~" (f-short buffer-file-name))
                    (s-concat "~/.../" (f-filename (f-parent buffer-file-name)) "/" (f-filename buffer-file-name))
                    (s-concat "/.../" (f-filename (f-parent buffer-file-name)) "/" (f-filename buffer-file-name))
                  )
                  (f-short buffer-file-name)
                )
                (buffer-name)
              )
            )
          )
          ;; Right Side
          (format-mode-line
            "(%l,%c)"
          )
        )))
      )
#+END_SRC

** Org Mode
*** Enable =org-bullets=.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook #'org-bullets-mode)
#+END_SRC

*** Change the =org-ellipsis= to something cooler.
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "â¤µ")
#+END_SRC

*** Enable syntax highlighting.
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
*** Make inline LaTeX larger.
#+BEGIN_SRC emacs-lisp
(require 'org)
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.6))
#+END_SRC
* Editing & Workflow
** Company Mode
Enable ==company-mode== completion in all buffers
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

** Org Mode
*** Make TAB act as if it were issued in a buffer of the language's major mode.
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

*** Use the current window when editing a code snippet.
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

*** Enable spell checking.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

*** Automatically indent text and wrap lines.
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

*** Remove emphasis markers so that /italics/ or *bold* words just look that way.
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

*** Enable in-line images (use =org-redisplay-inline-images= to refresh the in-lined images).
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC

*** Enable visual line mode by default.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook #'visual-line-mode)
#+END_SRC

** Markdown
*** Enable visual line mode by default.
#+BEGIN_SRC emacs-lisp
(add-hook 'gfm-mode-hook #'visual-line-mode)
#+END_SRC

** Misc
*** Always assume that I want to kill the buffer when pressing =C-x k=.
#+BEGIN_SRC emacs-lisp
(defun hgt/kill-current-buffer ()
  "Kill the current buffer without prompting."
  (interactive)
  (kill-buffer (current-buffer)))

(global-set-key (kbd "C-x k") 'hgt/kill-current-buffer)
#+END_SRC

*** Always indent with spaces. Tabs are a sin.
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

*** Change the behavior of automatically created backup files.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/file-backups"))
    backup-by-copying t    ; Don't delete hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; Keep this many new (unchanged) backups
    keep-old-versions 5    ; Keep this many old (changed) backups
)
#+END_SRC

*** Enable =delete-selection-mode= because it makes sense.
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

*** Enable =cua-mode= because I hate the default keybindings.
#+BEGIN_SRC emacs-lisp
(cua-mode t)                          ; Enable cua-mode
(setq cua-auto-tabify-rectangles nil) ; Don't tabify after rectangle commands
(transient-mark-mode 1)               ; No region when not highlighted
(setq cua-keep-region-after-copy t)   ; Keep showing the region after copying it
#+END_SRC
*** Set the default working directory to =~/wolfram-research/stash/=.
#+BEGIN_SRC emacs-lisp
(setq default-directory "~/wolfram-research/stash/")
#+END_SRC
*** Enable =guide-key= by default.
#+BEGIN_SRC emacs-lisp
(require 'guide-key)
(guide-key-mode t)
(setq guide-key/guide-key-sequence t)
(setq guide-key/popup-window-position 'bottom)
#+END_SRC
